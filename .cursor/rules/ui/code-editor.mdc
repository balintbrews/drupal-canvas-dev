---
description: Understanding the client-side implementation of the code editor
globs: src/features/code-editor/**
alwaysApply: false
---

# In-browser code editor

## Overview

The in-browser code editor in Drupal Canvas enables users to build components
using React and Tailwind CSS. It provides a visual interface for component
development with real-time preview, auto-compilation, and auto-save
functionality.

Note: The codebase and documentation refers to these components interchangeably
as "JavaScript components" or "(in-browser) code components".

## Core architecture

### Redux slice ([`codeEditorSlice.ts`](mdc:web/modules/contrib/canvas/ui/src/features/code-editor/codeEditorSlice.ts))

The central Redux slice manages all code editor state with these key
responsibilities:

- **Component state**: Manages the current code component being edited (props,
  slots, source code, compiled code)
- **Global assets**: Handles global CSS code shared across components
- **Editor status**: Tracks compilation, saving states, and auto-save needs
- **Auto-save logic**: Automatically triggers saves when content changes

#### Key state structure

```typescript
interface CodeEditorState {
  status: CodeEditorStatusOptions; // Editor status flags
  codeComponent: CodeComponent; // Current component data
  globalAssetLibrary: AssetLibrary; // Global CSS/JS assets
  previewCompiledJsForSlots: string; // Compiled JS for slot previews
}
```

#### Status management

The `status` object tracks critical editor states:

- `needsAutoSave`: Controls when auto-save mechanism triggers
- `hasUnsavedChanges`: User-facing flag for unsaved changes (UI feedback
  blocking navigation)
- `compilationError`: Indicates JS or Tailwind CSS compilation issues
- `isCompiling`/`isSaving`: Loading states for compilation and save operations

### Component management patterns

#### Props and slots

- **Props**: Component input parameters with types, examples, and validation
- **Slots**: Named content areas that accept other components â€” JSX/React
  content in the code editor preview
- **Serialization**: Props/slots serialize to/from backend-compatible format
- **Machine names**: Convert human-readable names to camelCase identifiers

#### Data lifecycle

1. **Initialization**: `initializeCodeEditor` loads component and global assets
2. **Editing**: Real-time updates via `setCodeComponentProperty`
3. **Compilation**: Automatic JS/CSS compilation on source changes
4. **Auto-save**: Debounced saves (1s delay) when `needsAutoSave` is true
5. **Reset**: `resetCodeEditor` cleans up on component unmount

#### Import and dependency tracking

The editor automatically tracks:

- **JS component imports**: Components imported from `@/components/`
- **Data dependencies**: Data passed in `drupalSettings` needed for JSON:API or
  utilities

### Key components

#### `MosaicContainer`

The main layout component using `react-mosaic-component`:

- **Three panels**: Editor (tabs for JS/CSS/Global CSS), Preview, Component data
- **Layout toggle**: Switch between default and full-editor layouts
- **Tab management**: JavaScript, CSS, and Global CSS editor tabs

#### Preview system

Real-time component preview with iframe sandboxing:

- **Import mapping**: Maps module imports to Canvas-provided libraries
- **Error handling**: Shows compilation, missing export, and import errors
- **Asset injection**: Includes component CSS and global styles
- **Slot rendering**: Compiles and renders slot examples

#### Editors

- **JavaScriptEditor**: CodeMirror with React/JSX support and import assistance
- **CssEditor**: Component-specific CSS editing
- **GlobalCssEditor**: Global stylesheet and Tailwind CSS theme variables
  management

### Hook patterns

#### `useCodeEditor` (main orchestrator)

_File:
`mdc:web/modules/contrib/canvas/ui/src/features/code-editor/hooks/useCodeEditor.ts`_

Controls the complete code editor lifecycle:

- URL-based component loading
- Data initialization and state management
- Compilation and auto-save coordination
- Clean-up on unmount

#### `useAutoSave`

_File:
`mdc:web/modules/contrib/canvas/ui/src/features/code-editor/hooks/useAutoSave.tsx`_

Debounced auto-save with dependency tracking:

- 1-second delay before saving
- Tracks both component and global asset changes
- Uses refs to avoid triggering saves unnecessarily
- Updates status flags appropriately

#### `useSourceCode`

_File:
`mdc:web/modules/contrib/canvas/ui/src/features/code-editor/hooks/useSourceCode.ts`_

Handles real-time compilation:

- Monitors source code changes
- Triggers JS and CSS compilation
- Updates compilation status and errors

## Common tasks

### Creating or modifying a prop type

1. Update `CodeComponentProp` and `CodeComponentPropSerialized` types for new or
   modified prop types in
   `mdc:web/modules/contrib/canvas/ui/src/types/CodeComponent.ts`
2. Update derivation logic in `derivedPropTypes` in
   `mdc:web/modules/contrib/canvas/ui/src/features/code-editor/component-data/derivedPropTypes.ts`
3. Update serialization functions in
   `mdc:web/modules/contrib/canvas/ui/src/features/code-editor/utils.ts`:
   `serializeProps()` and `deserializeProps()`
4. Add or update form components for the new type
5. Update tests in
   `mdc:web/modules/contrib/canvas/ui/tests/unit/code-editor-component-data-props.cy.jsx`
   and
   `mdc:web/modules/contrib/canvas/ui/src/features/code-editor/utils/code-editor-utils.test.jsx`
