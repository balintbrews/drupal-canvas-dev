---
description: Guidelines for running automated tests to verify code changes
alwaysApply: true
---

# Running automated tests to verify your work

The following instructions will refer to different parts of the codebase. See
[`project.mdc`](mdc:.cursor/rules/project.mdc) for details on the codebase
structure.

When it comes to running tests, you can ignore what's described in
[`project.mdc`](mdc:.cursor/rules/project.mdc) as "Root". There are no tests to
run there. The other parts listed there are relevant.

Whenever you make changes, identify which part of the project you are in, and
run the relevant tests according to the followings.

## UI: `web/modules/contrib/canvas/ui`

### Vitest

Always see if there are tests written in Vitest to verify your changes. Most of
the Vitest tests are co-located with the implementation.

Look for files that end with `.test.ts` or `.test.tsx`. These are Vitest files.
Always run the relevant ones for your changes.

E.g. if you updated the file `src/features/code-editor/hooks/useCodeEditor.ts`,
see if there is a file named
`src/features/code-editor/hooks/useCodeEditor.test.ts`. If found, run the tests
as follows:

```
ddev n run test -- [path]
```

Pass the path to the test file relative to the UI folder. So, e.g.,
`web/modules/contrib/canvas/ui/src/features/code-editor/hooks/useCodeEditor.test.tsx`
should be passed as `src/features/code-editor/hooks/useCodeEditor.test.tsx`.
E.g.:

```
ddev n run test -- src/features/code-editor/hooks/useCodeEditor.test.tsx
```

When you're done with specific changes, and all the individual tests are
passing, always run the entire Vitest test suite:

```
ddev n run test
```

### Cypress component tests

Certain features in the UI codebase are covered by Cypress component tests found
in the directory `web/modules/contrib/canvas/ui/tests/unit`.

Identify whenever your changes are covered by any of these tests. If so, run
them as follows:

```
ddev cy --component --spec [path]
```

Pass the path to the test file relative to the UI folder. So, e.g.,
`web/modules/contrib/canvas/ui/tests/unit/undo-redo-timeline.cy.js` should be
passed as `tests/unit/undo-redo-timeline.cy.js`. E.g.:

```
ddev cy --component --spec tests/unit/undo-redo-timeline.cy.js
```

Never run the entire Cypress component test suite.

### Cypress end-to-end tests

Never run Cypress end-to-end tests.

## Playwright end-to-end tests: `web/modules/contrib/canvas/tests`

The project has end-to-end tests written in Playwright. Identify whenever your
changes are covered by any of these tests. If so, run them as follows:

```
ddev playwright --spec [path]
```

Pass the path to the test file relative to the UI folder. So, e.g.,
`web/modules/contrib/canvas/tests/src/Playwright/navigationUndoRedo.spec.ts`
should be passed as `tests/src/Playwright/navigationUndoRedo.spec.ts`. E.g.:

```
ddev playwright --spec tests/src/Playwright/navigationUndoRedo.spec.ts
```

## Backend: `web/modules/contrib/canvas`

### PHPUnit tests

The backend codebase includes PHPUnit tests for PHP code. Look for test files in
the `tests/` directory, organized into subdirectories like `tests/src/Unit/`,
`tests/src/Functional/`, `tests/src/Kernel/`, etc.

To run PHPUnit tests, use the following command:

```
ddev phpunit [path]
```

Pass the path to the test file or directory relative to the
`web/modules/contrib/canvas/` folder. For example, to run the OpenAPI
specification validation tests:

```
ddev phpunit tests/src/Unit/OpenApiSpecValidationTest.php
```

You can also run all tests in a directory:

```
ddev phpunit tests/src/Unit/
```

Or run all tests in a module subdirectory:

```
ddev phpunit modules/canvas_oauth
```

### PHPStan

PHPStan is a static analysis tool that checks PHP code for potential issues
without running the code. Run PHPStan to verify your backend changes:

```
ddev phpstan
```

This command analyzes the entire Canvas module codebase using the configuration
in `phpstan.neon`.

### PHP Code Beautifier and Fixer (phpcs)

The PHP Code Beautifier and Fixer automatically fixes coding standard violations
in PHP code. Run it to ensure your code follows the project's coding standards:

```
ddev phpcs
```

You can also run it on a specific path relative to the
`web/modules/contrib/canvas/` folder:

```
ddev phpcs modules/canvas_oauth
```

This command uses the configuration in `phpcs.xml`.

## CLI: `web/modules/contrib/canvas/cli`

Instructions to be added. In the meantime, do not run tests, or ask.
