langcode: en
status: true
dependencies: {}
machineName: hero
name: Hero
required:
  - title
  - description
  - buttonLabel
  - buttonLink
  - backgroundColor
props:
  title:
    title: Title
    type: string
    examples:
      - "White-label human intelligence for your AI projects"
  description:
    title: Description
    type: string
    examples:
      - "Leverage a team of smart, creative, and experienced humans, who
        <em>actually</em> know what they're doing. We deliver the work, and you
        can tell your customers and investors that it was done with AI."
    contentMediaType: text/html
    x-formatting-context: block
  buttonLabel:
    title: "Button label"
    type: string
    examples:
      - "Get started today"
  buttonLink:
    title: "Button link"
    type: string
    examples:
      - page/1
    format: uri-reference
  image:
    title: Image
    type: object
    examples:
      - src: "https://images.unsplash.com/photo-1484959014842-cd1d967a39cf?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80"
        alt: "Woman playing the violin"
        width: 1770
        height: 1180
    $ref: "json-schema-definitions://canvas.module/image"
  darkVariant:
    title: "Dark variant"
    type: boolean
    examples:
      - true
  backgroundColor:
    title: "Background color"
    type: string
    examples:
      - crust
    enum:
      - base
      - mantle
      - crust
    "meta:enum":
      base: Base
      mantle: Mantle
      crust: Crust
slots: {}
js:
  original: |
    import FormattedText from "@/lib/FormattedText";
    import { cn } from "@/lib/utils";
    import { cva } from "class-variance-authority";

    const Hero = ({
      title,
      description,
      buttonLabel,
      buttonLink,
      image,
      darkVariant,
      backgroundColor,
    }) => {
      const heroVariants = cva("", {
        variants: {
          colorScheme: {
            light: "",
            dark: "dark",
          },
          backgroundColor: {
            base: "bg-base",
            mantle: "bg-mantle",
            crust: "bg-crust",
          },
        },
        defaultVariants: {
          colorScheme: "light",
          backgroundColor: "base",
        },
      });
      return (
        <section
          className={heroVariants({
            colorScheme: darkVariant ? "dark" : "light",
            backgroundColor,
          })}
        >
          <div className="mx-auto max-w-screen-xl sm:grid sm:grid-cols-2 sm:items-center">
            <div className="p-8 md:p-12 lg:px-16 lg:py-24">
              <div className="flex max-w-xl flex-col gap-8">
                <h2 className="from-peach to-mauve tracking-relaxed text-balance bg-gradient-to-r bg-clip-text text-2xl font-extrabold text-transparent md:text-4xl">
                  {title}
                </h2>
                <FormattedText
                  as="p"
                  className="text-text text-balance leading-relaxed"
                >
                  {description}
                </FormattedText>
                <div>
                  <a
                    href={buttonLink}
                    className={cn(
                      "bg-mauve text-inverted-text hover:bg-mauve/75 inline-block rounded-sm px-12 py-3 text-sm font-medium transition",
                      "focus-visible:outline-red focus-visible:outline-2 focus-visible:outline-offset-2",
                    )}
                  >
                    {buttonLabel}
                  </a>
                </div>
              </div>
            </div>
            <div className="h-full w-full overflow-hidden rounded-3xl py-6 md:py-8 lg:py-14">
              <img
                alt={image.alt}
                src={image.src}
                width={image.width}
                height={image.height}
                className="sm:rounded-l-4xl dark:border-surface-0 h-full w-full object-cover object-right shadow-lg xl:rounded-r-xl dark:border dark:shadow-none"
              />
            </div>
          </div>
        </section>
      );
    };

    export default Hero;
  compiled: |
    import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
    import FormattedText from "@/lib/FormattedText";
    import { cn } from "@/lib/utils";
    import { cva } from "class-variance-authority";
    const Hero = ({ title, description, buttonLabel, buttonLink, image, darkVariant, backgroundColor })=>{
        const heroVariants = cva("", {
            variants: {
                colorScheme: {
                    light: "",
                    dark: "dark"
                },
                backgroundColor: {
                    base: "bg-base",
                    mantle: "bg-mantle",
                    crust: "bg-crust"
                }
            },
            defaultVariants: {
                colorScheme: "light",
                backgroundColor: "base"
            }
        });
        return /*#__PURE__*/ _jsx("section", {
            className: heroVariants({
                colorScheme: darkVariant ? "dark" : "light",
                backgroundColor
            }),
            children: /*#__PURE__*/ _jsxs("div", {
                className: "mx-auto max-w-screen-xl sm:grid sm:grid-cols-2 sm:items-center",
                children: [
                    /*#__PURE__*/ _jsx("div", {
                        className: "p-8 md:p-12 lg:px-16 lg:py-24",
                        children: /*#__PURE__*/ _jsxs("div", {
                            className: "flex max-w-xl flex-col gap-8",
                            children: [
                                /*#__PURE__*/ _jsx("h2", {
                                    className: "from-peach to-mauve tracking-relaxed text-balance bg-gradient-to-r bg-clip-text text-2xl font-extrabold text-transparent md:text-4xl",
                                    children: title
                                }),
                                /*#__PURE__*/ _jsx(FormattedText, {
                                    as: "p",
                                    className: "text-text text-balance leading-relaxed",
                                    children: description
                                }),
                                /*#__PURE__*/ _jsx("div", {
                                    children: /*#__PURE__*/ _jsx("a", {
                                        href: buttonLink,
                                        className: cn("bg-mauve text-inverted-text hover:bg-mauve/75 inline-block rounded-sm px-12 py-3 text-sm font-medium transition", "focus-visible:outline-red focus-visible:outline-2 focus-visible:outline-offset-2"),
                                        children: buttonLabel
                                    })
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ _jsx("div", {
                        className: "h-full w-full overflow-hidden rounded-3xl py-6 md:py-8 lg:py-14",
                        children: /*#__PURE__*/ _jsx("img", {
                            alt: image.alt,
                            src: image.src,
                            width: image.width,
                            height: image.height,
                            className: "sm:rounded-l-4xl dark:border-surface-0 h-full w-full object-cover object-right shadow-lg xl:rounded-r-xl dark:border dark:shadow-none"
                        })
                    })
                ]
            })
        });
    };
    export default Hero;
css:
  original: ""
  compiled: ""
dataDependencies: {}
