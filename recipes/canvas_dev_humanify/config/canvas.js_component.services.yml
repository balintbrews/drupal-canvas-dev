langcode: en
status: false
dependencies:
  enforced:
    config:
      - canvas.js_component.card
      - canvas.js_component.grid
machineName: services
name: Services
required: {}
props: {}
slots: {}
js:
  original: |-
    import Card from "@/components/card";
    import Grid from "@/components/grid";
    import { JsonApiClient } from "@drupal-api-client/json-api-client";
    import { DrupalJsonApiParams } from "drupal-jsonapi-params";
    import useSWR from "swr";

    const Services = () => {
      const client = new JsonApiClient();
      const { data, error, isLoading } = useSWR(
        [
          "node--humanify_service",
          {
            queryString: new DrupalJsonApiParams()
              .addSort("field_position")
              .getQueryString(),
          },
        ],
        ([type, options]) => client.getCollection(type, options),
      );

      if (error) return "An error has occurred.";
      if (isLoading) return "Loading...";
      return (
        <Grid
          content={data.map((service) => (
            <Card
              key={service.id}
              title={service.title}
              description={service.field_description.value}
              iconNameFromLucide={service.field_icon}
              iconColor={service.field_icon_color}
            />
          ))}
        />
      );
    };

    export default Services;
  compiled: |
    import { jsx as _jsx } from "react/jsx-runtime";
    import Card from "@/components/card";
    import Grid from "@/components/grid";
    import { JsonApiClient } from "@drupal-api-client/json-api-client";
    import { DrupalJsonApiParams } from "drupal-jsonapi-params";
    import useSWR from "swr";
    const Services = ()=>{
        const client = new JsonApiClient();
        const { data, error, isLoading } = useSWR([
            "node--humanify_service",
            {
                queryString: new DrupalJsonApiParams().addSort("field_position").getQueryString()
            }
        ], ([type, options])=>client.getCollection(type, options));
        if (error) return "An error has occurred.";
        if (isLoading) return "Loading...";
        return /*#__PURE__*/ _jsx(Grid, {
            content: data.map((service)=>/*#__PURE__*/ _jsx(Card, {
                    title: service.title,
                    description: service.field_description.value,
                    iconNameFromLucide: service.field_icon,
                    iconColor: service.field_icon_color
                }, service.id))
        });
    };
    export default Services;
css:
  original: ""
  compiled: |
    /*! tailwindcss v4.1.13 | MIT License | https://tailwindcss.com */
dataDependencies:
  drupalSettings:
    - v0.baseUrl
    - v0.jsonapiSettings
